// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(cuid())
  email             String    @unique
  passwordHash      String    @map("password_hash")
  companyName       String    @map("company_name")
  position          String
  phoneNumber       String    @map("phone_number")
  profilePictureUrl String?   @map("profile_picture_url")
  bio               String?
  emailVerified     Boolean   @default(false) @map("email_verified")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")
  lastLogin         DateTime? @map("last_login")

  // Relations
  sessions          Session[]
  emailVerifications EmailVerification[]
  serpJobs          SerpJob[]
  watchlistItems    WatchlistItem[]
  prospectItems     ProspectItem[]

  @@map("users")
}

model Session {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  tokenHash String   @map("token_hash")
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  isActive  Boolean  @default(true) @map("is_active")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model EmailVerification {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  token     String   @unique
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("email_verifications")
}

// ============================================================================
// SERP INTELLIGENCE DATABASE SCHEMA
// ============================================================================
// This schema supports all SERP intelligence agents and future functionality:
// - Prospect Finder Agent: Business discovery and lead generation
// - Website Intelligence Agent: Competitor analysis and SEO insights
// - SERP Intelligence Agent: Keyword tracking and ranking monitoring
// - Watchlist System: Unified prospect/competitor management
// - Analytics & Reporting: Historical data and trends
// ============================================================================

// Track SERP search requests and jobs
model SerpJob {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  keyword           String
  location          String?
  language          String?  @default("English")
  device            String?  @default("desktop")
  os                String?  @default("windows")
  searchEngine      String   @default("google") @map("search_engine")
  searchType        String   @default("organic") @map("search_type") // organic, maps, local_pack
  status            String   @default("pending") // pending, processing, completed, failed
  dataforseoTaskId  String?  @map("dataforseo_task_id")
  cost              Float?   @default(0)
  resultsCount      Int?     @map("results_count")
  errorMessage      String?  @map("error_message")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  completedAt       DateTime? @map("completed_at")

  // Relations
  user              User @relation(fields: [userId], references: [id], onDelete: Cascade)
  serpResults       SerpResult[]
  watchlistItems    WatchlistItem[]
  prospectItems     ProspectItem[]

  @@map("serp_jobs")
  @@index([userId, keyword])
  @@index([status])
  @@index([createdAt])
}

// Store individual SERP results from DataForSEO
model SerpResult {
  id                String   @id @default(cuid())
  serpJobId         String   @map("serp_job_id")
  rankGroup         Int      @map("rank_group")
  rankAbsolute      Int      @map("rank_absolute")
  page              Int      @default(1)
  position          String?  // left, right, top, bottom
  resultType        String   @map("result_type") // organic, local_pack, maps, featured_snippet
  title             String?
  description       String?
  url               String?
  domain            String?
  websiteName       String?  @map("website_name")
  phone             String?
  address           String?
  city              String?
  state             String?
  zipCode           String?  @map("zip_code")
  country           String?
  rating            Float?
  reviewsCount      Int?     @map("reviews_count")
  ratingMax         Int?     @map("rating_max")
  isPaid            Boolean  @default(false) @map("is_paid")
  isFeatured        Boolean  @default(false) @map("is_featured")
  isImage           Boolean  @default(false) @map("is_image")
  isVideo           Boolean  @default(false) @map("is_video")
  isMalicious       Boolean  @default(false) @map("is_malicious")
  breadcrumb        String?
  cacheUrl          String?  @map("cache_url")
  relatedSearchUrl  String?  @map("related_search_url")
  extendedSnippet   String?  @map("extended_snippet")
  highlighted       String[] // Array of highlighted keywords
  links             Json?    // Related links as JSON
  faq               Json?    // FAQ data as JSON
  images            Json?    // Image data as JSON
  price             String?
  timestamp         DateTime?
  xpath             String?
  cid               String?  // Google CID for local businesses
  placeId           String?  @map("place_id") // Google Place ID
  rawData           Json?    @map("raw_data") // Complete raw data from DataForSEO
  rectangle         Json?    // Position rectangle data
  createdAt         DateTime @default(now()) @map("created_at")

  // Relations
  serpJob           SerpJob @relation(fields: [serpJobId], references: [id], onDelete: Cascade)
  businessProfile   BusinessProfile?
  watchlistItems    WatchlistItem[]
  prospectItems     ProspectItem[]

  @@map("serp_results")
  @@index([serpJobId])
  @@index([domain])
  @@index([resultType])
  @@index([rankAbsolute])
}

// Store comprehensive business profiles from SERP data
model BusinessProfile {
  id                String   @id @default(cuid())
  serpResultId      String?  @unique @map("serp_result_id")
  placeId           String?  @map("place_id") // Google Place ID
  cid               String?  // Google CID
  name              String
  domain            String?
  websiteUrl        String?  @map("website_url")
  category          String?
  subcategory       String?
  industry          String?
  location          String?
  address           String?
  city              String?
  state             String?
  zipCode           String?  @map("zip_code")
  country           String?
  phone             String?
  email             String?
  description       String?
  rating            Float?
  reviewsCount      Int?     @map("reviews_count")
  ratingMax         Int?     @map("rating_max")
  isVerified        Boolean  @default(false) @map("is_verified")
  isPaid            Boolean  @default(false) @map("is_paid")
  businessHours     Json?    @map("business_hours") // Store as JSON
  socialMedia       Json?    @map("social_media") // Store as JSON
  services          String[] // Array of services offered
  specialties       String[] // Array of specialties
  insuranceAccepted String[] @map("insurance_accepted") // Array of insurance types
  languages         String[] // Array of languages spoken
  certifications    String[] // Array of certifications
  awards            String[] // Array of awards
  seoScore          Int?     @map("seo_score")
  domainAuthority   Int?     @map("domain_authority")
  backlinks         Int?
  monthlyTraffic    Int?     @map("monthly_traffic")
  pageSpeed         Float?   @map("page_speed")
  mobileScore       Int?     @map("mobile_score")
  accessibilityScore Int?   @map("accessibility_score")
  lastAnalyzed      DateTime? @map("last_analyzed")
  isActive          Boolean  @default(true) @map("is_active")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  // Relations
  serpResult        SerpResult? @relation(fields: [serpResultId], references: [id])
  watchlistItems    WatchlistItem[]
  prospectItems     ProspectItem[]
  competitorAnalysis CompetitorAnalysis[]
  keywordRankings   KeywordRanking[]

  @@map("business_profiles")
  @@index([domain])
  @@index([category])
  @@index([city, state])
  @@index([rating])
  @@index([seoScore])
}

// Track keyword rankings over time
model KeywordRanking {
  id                String   @id @default(cuid())
  businessProfileId String   @map("business_profile_id")
  keyword           String
  searchEngine      String   @default("google") @map("search_engine")
  location          String?
  device            String?  @default("desktop")
  rankGroup         Int      @map("rank_group")
  rankAbsolute      Int      @map("rank_absolute")
  page              Int      @default(1)
  position          String?
  url               String?
  title             String?
  description       String?
  isPaid            Boolean  @default(false) @map("is_paid")
  searchVolume      Int?     @map("search_volume")
  competition       String?  // low, medium, high
  cpc               Float?   // Cost per click
  difficulty        Int?     // Keyword difficulty score
  trend             String?  // rising, falling, stable
  previousRank      Int?     @map("previous_rank")
  rankChange        Int?     @map("rank_change")
  trackedAt         DateTime @default(now()) @map("tracked_at")
  createdAt         DateTime @default(now()) @map("created_at")

  // Relations
  businessProfile   BusinessProfile @relation(fields: [businessProfileId], references: [id], onDelete: Cascade)

  @@map("keyword_rankings")
  @@index([businessProfileId])
  @@index([keyword])
  @@index([trackedAt])
  @@index([rankAbsolute])
}

// Competitor analysis and comparison data
model CompetitorAnalysis {
  id                String   @id @default(cuid())
  businessProfileId String   @map("business_profile_id")
  competitorId      String   @map("competitor_id")
  analysisType      String   @map("analysis_type") // seo, content, backlinks, social, advertising
  metric            String
  value             String
  score             Int?
  comparison        String?  // better, worse, equal
  insights          String?
  recommendations   String?
  analyzedAt        DateTime @default(now()) @map("analyzed_at")
  createdAt         DateTime @default(now()) @map("created_at")

  // Relations
  businessProfile   BusinessProfile @relation(fields: [businessProfileId], references: [id], onDelete: Cascade)

  @@map("competitor_analysis")
  @@index([businessProfileId])
  @@index([competitorId])
  @@index([analysisType])
}

// Watchlist items for prospect and competitor management
model WatchlistItem {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  serpJobId         String?  @map("serp_job_id")
  serpResultId      String?  @map("serp_result_id")
  businessProfileId String?  @map("business_profile_id")
  itemType          String   @map("item_type") // prospect, competitor, website
  name              String
  domain            String?
  category          String?
  location          String?
  score             Int?
  rating            Float?
  status            String   @default("active") // active, monitoring, contacted, converted, lost
  priority          String   @default("medium") // high, medium, low
  tags              String[] // Array of tags
  notes             String?
  highlights        String[] // Array of key highlights
  contactInfo       Json?    @map("contact_info") // Store as JSON
  metrics           Json?    // Store performance metrics as JSON
  lastChecked       DateTime? @map("last_checked")
  addedAt           DateTime @default(now()) @map("added_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  // Relations
  user              User @relation(fields: [userId], references: [id], onDelete: Cascade)
  serpJob           SerpJob? @relation(fields: [serpJobId], references: [id])
  serpResult        SerpResult? @relation(fields: [serpResultId], references: [id])
  businessProfile   BusinessProfile? @relation(fields: [businessProfileId], references: [id])

  @@map("watchlist_items")
  @@index([userId])
  @@index([itemType])
  @@index([status])
  @@index([priority])
  @@index([addedAt])
}

// Track prospects with enhanced features
model ProspectItem {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  serpJobId         String?  @map("serp_job_id")
  serpResultId      String?  @map("serp_result_id")
  businessProfileId String?  @map("business_profile_id")
  name              String
  domain            String?
  category          String?
  location          String?
  score             Int?
  rating            Float?
  status            String   @default("new") // new, contacted, qualified, proposal, closed-won, closed-lost
  priority          String   @default("medium") // high, medium, low
  tags              String[] // Array of tags
  notes             String?
  progress          String?  // Progress notes
  pitchingPoints    String[] // Array of pitching points
  aiRecommendations String?  @map("ai_recommendations") // AI-generated recommendations
  emailTemplate      String?  @map("email_template") // AI-generated email template
  contactInfo       Json?    @map("contact_info") // Store as JSON
  metrics           Json?    // Store performance metrics as JSON
  lastContacted     DateTime? @map("last_contacted")
  nextFollowUp      DateTime? @map("next_follow_up")
  isActive          Boolean  @default(true) @map("is_active")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  // Relations
  user              User @relation(fields: [userId], references: [id], onDelete: Cascade)
  serpJob           SerpJob? @relation(fields: [serpJobId], references: [id])
  serpResult        SerpResult? @relation(fields: [serpResultId], references: [id])
  businessProfile   BusinessProfile? @relation(fields: [businessProfileId], references: [id])

  @@map("prospect_items")
  @@index([userId])
  @@index([businessProfileId])
  @@index([status])
  @@index([priority])
}
